// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Message__JSON from "./Message__JSON.bs.mjs";

function getServerUsername() {
  return "server";
}

function create(from, message) {
  var timestamp = Date.now();
  return {
          from: from,
          message: message,
          timestamp: timestamp
        };
}

function encode(message) {
  return Object.fromEntries([
              [
                "from",
                message.from
              ],
              [
                "message",
                message.message
              ],
              [
                "timestamp",
                message.timestamp
              ]
            ]);
}

function serializeOne(payload) {
  return Message__JSON.stringify(encode(payload));
}

function serializeMany(payload) {
  return Message__JSON.stringify(payload.map(encode));
}

function decode(json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string") {
    return {
            TAG: "Error",
            _0: "Expected an object"
          };
  }
  if (!(typeof json === "object" && !Array.isArray(json))) {
    return {
            TAG: "Error",
            _0: "Expected an object"
          };
  }
  var from = json["from"];
  var message = json["message"];
  var timestamp = json["timestamp"];
  if (from === undefined) {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  var from$1 = Caml_option.valFromOption(from);
  if (!Array.isArray(from$1) && (from$1 === null || typeof from$1 !== "object") && typeof from$1 !== "number" && typeof from$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  if (typeof from$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  if (message === undefined) {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  var message$1 = Caml_option.valFromOption(message);
  if (!Array.isArray(message$1) && (message$1 === null || typeof message$1 !== "object") && typeof message$1 !== "number" && typeof message$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  if (typeof message$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  if (timestamp === undefined) {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  }
  var timestamp$1 = Caml_option.valFromOption(timestamp);
  if (!Array.isArray(timestamp$1) && (timestamp$1 === null || typeof timestamp$1 !== "object") && typeof timestamp$1 !== "number" && typeof timestamp$1 !== "string" || !(typeof timestamp$1 === "number" && from$1 !== "" && message$1 !== "")) {
    return {
            TAG: "Error",
            _0: "Expected non empty string from, string message and number timestamp"
          };
  } else {
    return {
            TAG: "Ok",
            _0: {
              from: from$1,
              message: message$1,
              timestamp: timestamp$1
            }
          };
  }
}

function deserializeOne(payload) {
  var errMsg = Message__JSON.parse(payload);
  if (errMsg.TAG === "Ok") {
    return decode(errMsg._0);
  } else {
    return {
            TAG: "Error",
            _0: "Error parsing JSON: " + errMsg._0
          };
  }
}

function deserializeMany(payload) {
  var errMsg = Message__JSON.parse(payload);
  if (errMsg.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: "Error parsing JSON: " + errMsg._0
          };
  }
  var jsons = errMsg._0;
  if (!Array.isArray(jsons) && (jsons === null || typeof jsons !== "object") && typeof jsons !== "number" && typeof jsons !== "string") {
    return {
            TAG: "Error",
            _0: "Expected an array"
          };
  }
  if (!Array.isArray(jsons)) {
    return {
            TAG: "Error",
            _0: "Expected an array"
          };
  }
  var decodedJsons = jsons.map(decode);
  var successes = [];
  var failures = [];
  decodedJsons.forEach(function (json) {
        if (json.TAG === "Ok") {
          successes.push(json._0);
          return ;
        }
        failures.push(json._0);
      });
  if (failures.length > 0) {
    return {
            TAG: "Error",
            _0: failures.join(", ")
          };
  } else {
    return {
            TAG: "Ok",
            _0: successes
          };
  }
}

export {
  getServerUsername ,
  create ,
  serializeOne ,
  serializeMany ,
  deserializeOne ,
  deserializeMany ,
}
/* No side effect */
