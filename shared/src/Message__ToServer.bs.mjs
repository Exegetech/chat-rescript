// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Message__JSON from "./Message__JSON.bs.mjs";

function create(from, message) {
  return {
          from: from,
          message: message
        };
}

function serialize(message) {
  return Message__JSON.stringify(Object.fromEntries([
                  [
                    "from",
                    message.from
                  ],
                  [
                    "message",
                    message.message
                  ]
                ]));
}

function deserialize(payload) {
  var errMsg = Message__JSON.parse(payload);
  if (errMsg.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: "Error parsing JSON: " + errMsg._0
          };
  }
  var dict = errMsg._0;
  if (!Array.isArray(dict) && (dict === null || typeof dict !== "object") && typeof dict !== "number" && typeof dict !== "string") {
    return {
            TAG: "Error",
            _0: "Expected an object"
          };
  }
  if (!(typeof dict === "object" && !Array.isArray(dict))) {
    return {
            TAG: "Error",
            _0: "Expected an object"
          };
  }
  var from = dict["from"];
  var message = dict["message"];
  if (from === undefined) {
    return {
            TAG: "Error",
            _0: "Expected non empty strings from and string message"
          };
  }
  var from$1 = Caml_option.valFromOption(from);
  if (!Array.isArray(from$1) && (from$1 === null || typeof from$1 !== "object") && typeof from$1 !== "number" && typeof from$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty strings from and string message"
          };
  }
  if (typeof from$1 !== "string") {
    return {
            TAG: "Error",
            _0: "Expected non empty strings from and string message"
          };
  }
  if (message === undefined) {
    return {
            TAG: "Error",
            _0: "Expected non empty strings from and string message"
          };
  }
  var message$1 = Caml_option.valFromOption(message);
  if (!Array.isArray(message$1) && (message$1 === null || typeof message$1 !== "object") && typeof message$1 !== "number" && typeof message$1 !== "string" || !(typeof message$1 === "string" && from$1 !== "" && message$1 !== "")) {
    return {
            TAG: "Error",
            _0: "Expected non empty strings from and string message"
          };
  } else {
    return {
            TAG: "Ok",
            _0: {
              from: from$1,
              message: message$1
            }
          };
  }
}

export {
  create ,
  serialize ,
  deserialize ,
}
/* No side effect */
