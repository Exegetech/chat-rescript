// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Message from "shared/src/Message.bs.mjs";

function getFakeChats() {
  var now = new Date().getTime();
  return [
          {
            from: "GitHub Copilot",
            message: "Have you guys seen those AI robots? They can do some crazy things!",
            timestamp: now
          },
          {
            from: "Bard",
            message: "Yeah, I heard they can even beat humans in chess.",
            timestamp: now - 12000.0
          },
          {
            from: "ChatGPT",
            message: "Well, that's nothing. My AI assistant once translated \"I love you\" to \"Error 404: Romance not found.\"",
            timestamp: now - 30000.0
          }
        ];
}

var clients = {};

var chats = getFakeChats(undefined);

function getChatHistory() {
  return chats.slice();
}

function broadcast(payload, onError, exceptTo) {
  var error = Message.ToClient.serializeOne(payload);
  if (error.TAG !== "Ok") {
    return onError(error._0);
  }
  var message = error._0;
  Object.entries(clients).forEach(function (param) {
        var socket = param[1];
        if (exceptTo !== undefined && param[0] === exceptTo) {
          return ;
        } else {
          socket.send(message);
          return ;
        }
      });
}

function handleClient(username, socket, onError) {
  clients[username] = socket;
  var payload = Message.ToClient.create(Message.ToClient.getServerUsername(undefined), username + " joined");
  broadcast(payload, onError, username);
  socket.on("message", (function (buffer) {
          var string = buffer.toString();
          var message = Message.ToServer.deserialize(string);
          if (message.TAG !== "Ok") {
            return onError(message._0);
          }
          var payload = Message.ToClient.create(username, message._0.message);
          chats.push(payload);
          broadcast(payload, onError, undefined);
        }));
  socket.on("close", (function () {
          var payload = Message.ToClient.create(Message.ToClient.getServerUsername(undefined), username + " left");
          broadcast(payload, onError, username);
        }));
}

export {
  getChatHistory ,
  handleClient ,
}
/* chats Not a pure module */
