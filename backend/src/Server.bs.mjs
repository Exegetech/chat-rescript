// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Chat from "./utils/Chat.bs.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Message from "shared/src/Message.bs.mjs";
import Fastify from "fastify";
import * as Nodeurl from "node:url";
import * as Nodepath from "node:path";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Nodeprocess from "node:process";
import Cors from "@fastify/cors";
import Static from "@fastify/static";
import Websocket from "@fastify/websocket";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var env = process.env["NODE_ENV"];

var dirname = Nodepath.dirname(Nodeurl.fileURLToPath(import.meta.url));

var fastify = Fastify({
      logger: true
    });

if (env !== undefined) {
  
} else {
  fastify.register(Static, {
        root: Nodepath.join(dirname, "public")
      });
}

fastify.register(Cors);

fastify.register(Websocket);

fastify.addHook("preValidation", (async function (request, reply) {
        var path = request.routeOptions.url;
        var username = request.query["username"];
        if (path === "/chat" && username === undefined) {
          reply.code(403).send("Connection rejected");
          return ;
        }
        
      }));

fastify.get("/chat", (async function (_request, reply) {
        var payload = Message.ToClient.serializeMany(Chat.getChatHistory(undefined));
        if (payload.TAG === "Ok") {
          reply.code(200).send(payload._0);
          return ;
        }
        fastify.log.error(payload._0);
      }));

fastify.register(async function (fastify) {
      fastify.get("/room", { websocket: true }, (function (connection, request) {
              var username = Core__Option.getExn(request.query["username"]);
              Chat.handleClient(username, connection.socket, (function (errMsg) {
                      fastify.log.error(errMsg);
                    }));
            }));
    });

async function start() {
  try {
    return await fastify.listen({
                port: 3000
              });
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var m = obj._1.message;
      if (m !== undefined) {
        fastify.log.error(m);
      }
      Nodeprocess.exit(1);
      return ;
    }
    throw obj;
  }
}

await start(undefined);

export {
  
}
/* env Not a pure module */
